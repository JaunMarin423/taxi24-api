import { Test, TestingModule } from '@nestjs/testing';
import { UserController } from '../../src/modules/user/controllers/user.controller';
import { UserService } from '../../src/modules/user/services/user.service';
import { CreateUserDto, UbicacionDto } from '../../src/modules/user/dtos/create-user.dto';
import { plainToInstance } from 'class-transformer';

// Local copy of UserResponse class since it's not exported
class UserResponse {
  _id: string;
  name: string;
  nombre: string;
  email: string;
  telefono: string;
  ubicacion: {
    type: string;
    coordinates: number[];
  };
  createdAt: Date;
  updatedAt: Date;

  constructor(user: any) {
    this._id = user._id;
    this.name = user.name;
    this.nombre = user.name; // Map name to nombre
    this.email = user.email;
    this.telefono = user.telefono;
    this.ubicacion = user.ubicacion;
    this.createdAt = user.createdAt;
    this.updatedAt = user.updatedAt;
  }
}

describe('UserController', () => {
  let controller: UserController;
  let service: UserService;

  // Helper function to create a UbicacionDto instance
  const createUbicacionDto = (coordinates: [number, number]): UbicacionDto => {
    const ubicacion = plainToInstance(UbicacionDto, {
      type: 'Point',
      coordinates: coordinates
    });
    
    // Add validate method
    ubicacion.validate = () => {
      if (coordinates[0] < -180 || coordinates[0] > 180) {
        throw new Error('Invalid longitude');
      }
      if (coordinates[1] < -90 || coordinates[1] > 90) {
        throw new Error('Invalid latitude');
      }
    };
    
    return ubicacion;
  };

  const mockUbicacion = createUbicacionDto([-74.5, 40]);

  // Create mock dates that we can reference
  const now = new Date();
  
  const mockUser = {
    _id: '1',
    name: 'Test User',
    email: 'user@test.com',
    telefono: '+1234567890',
    ubicacion: {
      type: 'Point',
      coordinates: [-74.5, 40]
    },
    createdAt: now,
    updatedAt: now
  };

  // Create the expected response object with both name and nombre
  const mockUserResponse = new UserResponse({
    _id: '1',
    name: 'Test User',
    email: 'user@test.com',
    telefono: '+1234567890',
    ubicacion: {
      type: 'Point',
      coordinates: [-74.5, 40]
    },
    createdAt: now,
    updatedAt: now
  });
  
  // The response will include both name and nombre fields

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UserController],
      providers: [
        {
          provide: UserService,
          useValue: {
            create: jest.fn().mockResolvedValue(mockUser),
            findAll: jest.fn().mockResolvedValue([mockUser]),
            findOne: jest.fn().mockResolvedValue(mockUser),
          },
        },
      ],
    }).compile();

    controller = module.get<UserController>(UserController);
    service = module.get<UserService>(UserService);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  describe('POST /users', () => {
    it('should create a new user', async () => {
      const createDto = plainToInstance(CreateUserDto, {
        name: 'Test User',
        email: 'user@test.com',
        password: 'password123',
        telefono: '+1234567890',
        ubicacion: createUbicacionDto([-74.5, 40])
      });

      const result = await controller.create(createDto);
      expect(service.create).toHaveBeenCalledWith(createDto);
      // The response should be a UserResponse instance
      expect(result).toBeInstanceOf(UserResponse);
      expect(result._id).toBe(mockUserResponse._id);
      expect(result.nombre).toBe(mockUserResponse.nombre);
      expect(result.email).toBe(mockUserResponse.email);
      expect(result.telefono).toBe(mockUserResponse.telefono);
      expect(result.ubicacion).toEqual(mockUserResponse.ubicacion);
      expect(result.createdAt).toEqual(mockUserResponse.createdAt);
      expect(result.updatedAt).toEqual(mockUserResponse.updatedAt);
    });
  });

  describe('GET /users', () => {
    it('should return an array of users', async () => {
      const result = await controller.findAll();
      expect(service.findAll).toHaveBeenCalled();
      // The response should be an array of UserResponse instances with nombre
      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBe(1);
      const userResponse = result[0];
      expect(userResponse).toBeInstanceOf(UserResponse);
      expect(userResponse._id).toBe(mockUserResponse._id);
      expect(userResponse.nombre).toBe(mockUserResponse.nombre);
      expect(userResponse.email).toBe(mockUserResponse.email);
      expect(userResponse.telefono).toBe(mockUserResponse.telefono);
      expect(userResponse.ubicacion).toEqual(mockUserResponse.ubicacion);
      expect(userResponse.createdAt).toEqual(mockUserResponse.createdAt);
      expect(userResponse.updatedAt).toEqual(mockUserResponse.updatedAt);
    });
  });

  describe('GET /users/:id', () => {
    it('should return a single user', async () => {
      const result = await controller.findOne('1');
      expect(service.findOne).toHaveBeenCalledWith('1');
      // The response should be a UserResponse instance
      expect(result).toBeInstanceOf(UserResponse);
      expect(result._id).toBe(mockUserResponse._id);
      expect(result.nombre).toBe(mockUserResponse.nombre);
      expect(result.email).toBe(mockUserResponse.email);
      expect(result.telefono).toBe(mockUserResponse.telefono);
      expect(result.ubicacion).toEqual(mockUserResponse.ubicacion);
      expect(result.createdAt).toEqual(mockUserResponse.createdAt);
      expect(result.updatedAt).toEqual(mockUserResponse.updatedAt);
    });
  });
});
