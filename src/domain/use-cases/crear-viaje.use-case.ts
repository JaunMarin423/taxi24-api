import { Injectable } from '@nestjs/common';
import { Types } from 'mongoose';
import { ViajeRepository } from '../repositories/viaje.repository';
import { Viaje } from '../entities/viaje.entity';

export type CrearViajeParams = {
  id?: string; // Optional, will be generated by MongoDB
  idConductor?: string | null; // Optional, can be null if not assigned yet
  idPasajero: string;
  origen: { lat: number; lng: number };
  destino: { lat: number; lng: number };
  estado?: 'PENDIENTE' | 'EN_CURSO' | 'COMPLETADO' | 'CANCELADO';
  fechaInicio?: Date;
};

@Injectable()
export class CrearViajeUseCase {
  constructor(private readonly viajeRepo: ViajeRepository) {}

  async execute(data: CrearViajeParams): Promise<Viaje> {
    try {
      // Generate a new ObjectId if one isn't provided
      const id = data.id || new Types.ObjectId().toString();
      
      // Ensure idConductor is a valid ObjectId string or null/undefined
      const idConductor = data.idConductor && Types.ObjectId.isValid(data.idConductor) 
        ? data.idConductor 
        : null;
      
      console.log('Creating trip with:', { 
        id, 
        idConductor,
        idPasajero: data.idPasajero,
        estado: data.estado || 'PENDIENTE'
      });
      
      const viaje = new Viaje(
        id,
        idConductor,
        data.idPasajero,
        data.origen,
        data.destino,
        data.estado || 'PENDIENTE',
        data.fechaInicio || new Date()
      );
      
      return await this.viajeRepo.crearViaje(viaje);
    } catch (error) {
      console.error('Error in CrearViajeUseCase:', error);
      throw error;
    }
  }
}